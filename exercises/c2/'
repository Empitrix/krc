# Exercises
## Chapter 1
- [ ] `20`. Write a program `detab` that replaces tabs in the input with the proper number of blanks to space to the next tab stop. Assume a fixed set of tab stops, say every n columns. Should n be a variable or a symbolic parameter?
- [ ] `21`. Write a program `entab` that replaces strings of blanks by the minimum number of tabs and blanks to achieve the same spacing. Use the same tab stops as for `detab`. When either a tab or a single blank would suffice to reach a tab stop, which should be given preference?
- [ ] `22`. Write a program to `fold` long input lines into two or more shorter lines after the last non-blank character that occurs before the n-th column of input. Make sure your program does something intelligent with very long lines, and if there are no blanks or tabs before the specified column.
- [ ] `23`. Write a program to remove all comments from a C program. Don't forget to handle quoted strings and character constants properly. C comments don't nest. 
- [ ] `24`. Write a program to check a C program for rudimentary syntax errors like unmatched parentheses, brackets and braces. Don't forget about quotes, both single and double, escape sequences, and comments. (This program is hard if you do it in full generality.) 

## Chapter 2
WROTE ALL

## Chapter 3
- [ ] `1`. Our binary search makes two tests inside the loop, when one would suffice (at the price of more tests outside.) Write a version with only one test inside the loop and measure the difference in run-time.
- [ ] `2`. Write a function `escape(s,t)` that converts characters like newline and tab into visible escape sequences like \n and \t as it copies the string t to s. Use a switch. Write a function for the other direction as well, converting escape sequences into the real characters.
- [ ] `3`. Write a function expand(s1,s2) that expands shorthand notations like a-z in the string s1 into the equivalent complete list abc...xyz in s2. Allow for letters of either case and digits, and be prepared to handle cases like a-b-c and a-z0-9 and -a-z. Arrange that a leading or trailing - is taken literally.
- [ ] `4`. In a two's complement number representation, our version of itoa does not handle the largest negative number, that is, the value of n equal to -(2wordsize-1). Explain why not. Modify it to print that value correctly, regardless of the machine on which it runs. 
- [ ] `5`. Write the function itob(n,s,b) that converts the integer n into a base b character representation in the string s. In particular, itob(n,s,16) formats s as a hexadecimal integer in s. 
- [ ] `6`. Write a version of itoa that accepts three arguments instead of two. The third argument is a minimum field width; the converted number must be padded with blanks on the left if necessary to make it wide enough.

## Chapter 4
- [ ] `1`. Write the function strindex(s,t) which returns the position of the rightmost occurrence of t in s, or -1 if there is none.
- [ ] `2`. Extend atof to handle scientific notation of the form  123.45e-6  where a floating-point number may be followed by e or E and an optionally signed exponent.
- [ ] `3`. Given the basic framework, it's straightforward to extend the calculator. Add the modulus (%) operator and provisions for negative numbers. 
- [ ] `4`. Add the commands to print the top elements of the stack without popping, to duplicate it, and to swap the top two elements. Add a command to clear the stack. 
- [ ] `5`. Add access to library functions like sin, exp, and pow. See <math.h> in

### Appendix B, Section 4. 

- [ ] `6`. Add commands for handling variables. (It's easy to provide twenty-six variables with single-letter names.) Add a variable for the most recently printed value. 
- [ ] `7`. Write a routine ungets(s) that will push back an entire string onto the input. Should ungets know about buf and bufp, or should it just use ungetch? 
- [ ] `8`. Suppose that there will never be more than one character of pushback. Modify getch and ungetch accordingly. 
- [ ] `9`. Our getch and ungetch do not handle a pushed-back EOF correctly. Decide what their properties ought to be if an EOF is pushed back, then implement your design. 
- [ ] `10`. An alternate organization uses getline to read an entire input line; this makes getch and ungetch unnecessary. Revise the calculator to use this approach. 
- [ ] `11`. Modify getop so that it doesn't need to use ungetch. Hint: use an internal static variable
- [ ] `12`. Adapt the ideas of printd to write a recursive version of itoa; that is, convert an integer into a string by calling a recursive routine.
- [ ] `13`. Write a recursive version of the function reverse(s), which reverses the string s in place. 
- [ ] `14`. Define a macro swap(t,x,y) that interchanges two arguments of type t. (Block structure will help.)


